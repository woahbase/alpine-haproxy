#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/3.0/doc/configuration.txt
#   https://docs.haproxy.org/3.0/configuration.html
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    # log         127.0.0.1 local2
    log stdout len 4096 format local syslog info

    chroot      "${HAPROXY_DATA-/var/lib/haproxy}"
    pidfile     /var/run/haproxy.pid
    maxconn     "${HAPROXY_MAXCONN-10000}"
    user        "${S6_USER}"
    group       "${S6_USER}"
    # daemon

    # turn on stats unix socket
    stats socket HAPROXY_SOCK user "${S6_USER}" group "${S6_USER}" mode 600 level "${HAPROXY_LEVELSOCK-admin}"

    # required for dataplaneapi
    .if strneq("${DPA_ARGS}","")
    master-worker
    insecure-fork-wanted
    .endif

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option log-health-checks
    option log-separate-errors
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

    .if strneq("${DPA_ARGS}","")
#---------------------------------------------------------------------
# example how to define user and enable Data Plane API on tcp/8080
# more information: https://github.com/haproxytech/dataplaneapi and
#   https://www.haproxy.com/documentation/hapee/2-0r1/configuration/dataplaneapi/
#---------------------------------------------------------------------
    userlist haproxy-dataplaneapi
        user DPA_USERNAME insecure-password DPA_PASSWORD

    program dpapi
        user        "${S6_USER}"
        group       "${S6_USER}"
        # no environment variables without with-contenv
        command /usr/local/bin/dataplaneapi DPA_ARGS
        no option start-on-reload

        backend self_dpapi
        server      dpapi1 127.0.0.1:8080 check
    .endif
#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend  main
    bind *:80

    # for when certs enabled
    .if strneq("${HAPROXY_CRTFILE}","")
    bind *:443 ssl crt "${HAPROXY_CRTFILE}"
    http-request redirect scheme https unless { ssl_fc }
    .endif

    # max-age is mandatory. 16000000 seconds is approximately 6 months. Use a low value during testing.
    http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"

    acl url_stats path_beg -i /stats
    use_backend self_stats if url_stats

    # required for dataplaneapi
    .if strneq("${DPA_ARGS}","")
    acl url_dpapi path_beg -i /v3
    use_backend self_dpapi if url_dpapi
    .endif

    acl url_static       path_beg       -i /static /images /javascript /stylesheets
    acl url_static       path_end       -i .jpg .gif .png .css .js

    use_backend static          if url_static
    default_backend             app

#---------------------------------------------------------------------
# frontend: Prometheus exporter
#---------------------------------------------------------------------
.if streq("${HAPROXY_PROMEX}",yes)
frontend prometheus
    bind *:8405
    # bind :8405 ssl crt /certs/site.pem
    mode http
    http-request use-service prometheus-exporter if { path "${HAPROXY_PROMEX_PATH-/metrics}" }
    no log
.endif
#---------------------------------------------------------------------
# stats listener and optional backend
#---------------------------------------------------------------------
listen stats
  bind 0.0.0.0:5556
  # acl private src 127.0.0.1/32
  # http-request deny unless private
  mode http
  stats enable
  stats hide-version
  stats realm "Haproxy Statistics"
  stats uri /stats
  # stats auth <redacted>

backend self_stats
  server      stats1 127.0.0.1:5556 check
#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
backend static
    balance     roundrobin
    server      static1 127.0.0.1:4331 check
    server      static2 127.0.0.1:4332 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend app
    balance     roundrobin
    server  app1 127.0.0.1:5001 check
    server  app2 127.0.0.1:5002 check
    server  app3 127.0.0.1:5003 check
    server  app4 127.0.0.1:5004 check
